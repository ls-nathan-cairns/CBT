#!/usr/bin/env python3


# This script is used for abstracting cfg files generated by the cfg.py script
# Author: Buster Major


# IMPORTS #


import re
import pydot
import random
from iteratortools import *


# CONSTANTS #


ERROR_LOG_FILE = os.path.join(ERROR_LOG_PATH, 'abstracting.csv')


# FUNCTIONS #


def get_children(graph, node):
    to_return = []
    for e in graph.get_edge_list():
        if str(e.get_source()) == str(node.get_name()):
            to_return.append(graph.get_node(e.get_destination())[0])
    return to_return


def abstract_if(graph):
    regexp = re.compile(r'((.|\n)*)(if\s+((?!(\"\:\")).*):)')
    nodes_to_change = []
    for n in graph.get_nodes():
        # Match nodes with an 'if' statement in them
        if regexp.match(graph.get_node(n.get_name())[0].get_label()):
            nodes_to_change.append(n)

    for n in nodes_to_change:
        match = regexp.search(graph.get_node(n.get_name())[0].get_label())
        minus_if = match.group(1).strip('"')
        predicate = match.group(4).strip('"')

        # Remove 'if' from original node label
        graph.get_node(n.get_name())[0].set_label(minus_if)

        # Remember current children to remove
        old_children = get_children(graph, n)

        if graph.get_node(n.get_name())[0].get_label() is '':
            # Old node label is now blank when predicate is removed so the old node becomes the new node to change
            node = graph.get_node(n.get_name())[0]
            node.set('shape', 'diamond')
            node.set('label', predicate)
            new_node = node
        else:
            # Add new 'if' node and connect it to previous node
            new_node = random.randint(1, 100001)
            graph.add_node(pydot.Node(name=new_node, shape='diamond', label=predicate))
            graph.add_edge(pydot.Edge(n.get_name(), str(new_node)))

        # Remove old edges of original node
        if old_children.__len__() is 1:
            if graph.get_edge(n.get_name(), old_children[0].get_name())[0].get('label').strip(' "\'\t\r\n') == predicate.strip(' "\'\t\r\n'):
                label = 'yes'
            else:
                label = 'no'
            graph.del_edge(n.get_name(), old_children[0].get_name(), 0)
            graph.add_edge(pydot.Edge(new_node, old_children[0].get_name(), label=label))
        else:
            graph.del_edge(n.get_name(), old_children[0].get_name(), 0)
            graph.del_edge(n.get_name(), old_children[1].get_name(), 0)

            # Add old neighbours as children of the new if node
            graph.add_edge(pydot.Edge(new_node, old_children[0].get_name(), label='yes'))
            graph.add_edge(pydot.Edge(new_node, old_children[1].get_name(), label='no'))


def process_graph(file_path):
    file_path = generalize_path(os.path.join(DATA_PATH, file_path))
    graph = pydot.graph_from_dot_file(file_path)
    for sg in graph[0].get_subgraph_list():
        abstract_if(sg)
    abstract_if(graph[0])
    with open(file_path, 'w+') as f:
        f.write(str(graph[0]))


if __name__ == '__main__':

    content = get_cfg_file_paths()

    iterate(process_graph, ERROR_LOG_FILE, content)
