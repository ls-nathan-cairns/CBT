#!/usr/bin/env python3


# This script is used for abstracting cfg files generated by the cfg.py script
# Author: Buster Major


import networkx as nx
import re


# IMPORTS #


def abstract_if(cfg):
    a = 1
    # fnefcv


# todo: main method which reads contents of directory


if __name__ == '__main__':
    g = nx.drawing.nx_pydot.read_dot('C:\\Users\\Buster\\Desktop\\out')
    attributes = nx.get_node_attributes(g, 'label')

    regexp = re.compile(r'((.|\n)*)(if\s+((?!(\"\:\")).*):)')
    for n in g.nodes():
        # Match nodes with an 'if' statement in them
        if regexp.match(g.node[n]['label']):
            match = regexp.search(g.node[n]['label'])
            minus_if = match.group(1)
            if_statement = match.group(3)
            predicate = match.group(4)
            for ne in nx.neighbors(g, n):
                print(ne)
    # for e in attributes:
    #     # regex for regular ifs: 'if\s+((?!(\"\:\")).*):' use first capturing group
    #     # regex for one line if elses: 'if\s+((?!(\"else\")).*)\s+else'
    #     if re.match(r'(.|\n)*if\s+((?!(\"\:\")).*):', attributes[e]):
    #         print(attributes[e])
    #         print(nx.neighbors(g, attributes[e]))

