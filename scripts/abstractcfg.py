#!/usr/bin/env python3


# This script is used for abstracting cfg files generated by the cfg.py script
# Author: Buster Major


import networkx as nx
import re
from iteratortools import *


# IMPORTS #


def abstract_if(g):
    i = 500  # TODO: change the number to something dynamic

    regexp = re.compile(r'((.|\n)*)(if\s+((?!(\"\:\")).*):)')
    nodes_to_change = []
    for n in g.nodes():
        # Match nodes with an 'if' statement in them
        if regexp.match(g.node[n]['label']):
            nodes_to_change.append(n)

    for n in nodes_to_change:
        match = regexp.search(g.node[n]['label'])
        minus_if = match.group(1).strip('"')
        predicate = match.group(4).strip('"')

        # Remove 'if' from original node label
        g.node[n]['label'] = minus_if

        # Remember current old neighbours to remove
        old_neighbours = []
        for ne in nx.neighbors(g, n):
            old_neighbours.append(ne)
        if old_neighbours.__len__() > 2:
            raise Exception('If node has more than 2 children, not supported')

        if g.node[n]['label'] is '':
            # Old node label is now blank when predicate is removed so the old node becomes the new node to change
            g.node[n]['label'] = predicate
            g.node[n]['shape'] = 'diamond'
            new_node = n
        else:
            # Add new 'if' node and connect it to previous node
            new_node = i
            g.add_node(new_node, label=predicate, shape='diamond')
            g.add_edge(n, new_node)

        # Remove old neighbours of original node
        g.remove_edge(n, old_neighbours[0])
        g.remove_edge(n, old_neighbours[1])

        # Add old neighbours as children of the new if node
        g.add_edge(new_node, old_neighbours[0], label='yes')
        g.add_edge(new_node, old_neighbours[1], label='no')

        i += 1

# todo: main method which reads contents of directory


if __name__ == '__main__':

    content = get_file_paths()
    # TODO: finish

    graph = nx.drawing.nx_pydot.read_dot('C:\\Users\\Buster\\Desktop\\ex30.py.dot')
    abstract_if(graph)

    nx.nx_pydot.write_dot(graph, 'C:\\Users\\Buster\\Desktop\\out.dot')
