#!/usr/bin/env python3


# This script is used for abstracting cfg files generated by the cfg.py script
# Author: Buster Major


import networkx as nx
import re


# IMPORTS #


def abstract_if(cfg):
    a = 1
    # fnefcv


# todo: main method which reads contents of directory


if __name__ == '__main__':
    g = nx.drawing.nx_pydot.read_dot('C:\\Users\\Buster\\Desktop\\out')
    attributes = nx.get_node_attributes(g, 'label')

    regexp = re.compile(r'((.|\n)*)(if\s+((?!(\"\:\")).*):)')
    nodes_to_change = []
    for n in g.nodes():
        # Match nodes with an 'if' statement in them
        if regexp.match(g.node[n]['label']):
            nodes_to_change.append(n)

    for n in nodes_to_change:
        match = regexp.search(g.node[n]['label'])
        minus_if = match.group(1)
        predicate = match.group(4)

        # Remove 'if' from original node label
        g.node[n]['label'] = minus_if

        # Remember current old neighbours to remove
        old_neighbours = []
        for ne in nx.neighbors(g, n):
            old_neighbours.append(ne)

        # Add new 'if' node and connect it to previous node
        g.add_node(69, label=predicate)  # TODO: change the number to something dynamic
        g.add_edge(n, 69)

        # Add old neighbours as children of the new if node
        for old_neighbour in old_neighbours:
            g.remove_edge(n, old_neighbour)
            g.add_edge(69, old_neighbour)

    nx.nx_pydot.write_dot(g, 'out.dot')
